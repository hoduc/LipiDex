/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java Library project to get you started.
 * For more details take a look at the Java Libraries chapter in the Gradle
 * user guide available at https://docs.gradle.org/4.7/userguide/java_library_plugin.html
 */

plugins {
    // Apply the java-library plugin to add support for Java Library
    id 'java-library'
    id 'eclipse'
    id 'application'
}

// In this section you declare where to find the dependencies of your project
repositories {
    // Use jcenter for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
}


dependencies {
    compile group: 'org.apache.commons', name: 'commons-lang3', version: '3.7'
    compile group: 'commons-io', name: 'commons-io', version: '2.5'
    compile group: 'org.apache.commons', name: 'commons-math3', version: '3.0'
}

sourceSets {
	main {
		resources {
			srcDirs "src/main/resources", "ExternalData"
		}
	}
}



version = '1.0'
mainClassName = 'app.App'

jar {
    manifest {
        attributes  'Implementation-Title': 'Test',
                    'Implementation-Version': version,
                    'Main-Class': '${mainClassName}',
                    'Class-Path': configurations.compile.collect { it.getName() }.join(' ')
    }
    
    from {
        configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
    }
}


distributions {
    main {
        contents {
            from jar
            from (".") {
            		include "ExternalData/**"
            }            
        }
    }
}

// shamelessly copy from http://mrhaki.blogspot.com/2015/04/gradle-goodness-alter-start-scripts.html
// Thank a lot
startScripts {
 	classpath += files('ExternalData/**')
    // Support closures to add an additional element to
    // CLASSPATH definition in the start script files.
    def configureClasspathVar = { findClasspath, pathSeparator, line ->
 
        // Looking for the line that starts with either CLASSPATH=
        // or set CLASSPATH=, defined by the findClasspath closure argument.
        line = line.replaceAll(~/^${findClasspath}=.*$/) { original ->
 
            // Get original line and append it
            // with the configuration directory.
            // Use specified path separator, which is different
            // for Windows or Unix systems.
            original += "${pathSeparator}/ExternalData"
        }
 
    }
 
    def configureUnixClasspath = configureClasspathVar.curry('CLASSPATH', ':')
    def configureWindowsClasspath = configureClasspathVar.curry('set CLASSPATH', ';')
 
    // The default script content is generated and
    // with the doLast method we can still alter
    // the contents before the complete task ends.
    doLast {
 
        // Alter the start script for Unix systems.
        unixScript.text =
            unixScript
                .readLines()
                .collect(configureUnixClasspath)
                .join('\n')
 
        // Alter the start script for Windows systems.
        windowsScript.text =
            windowsScript
                .readLines()
                .collect(configureWindowsClasspath)
                .join('\r\n')
 
    }
}
